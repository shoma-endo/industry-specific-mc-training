---
description: 
globs: 
alwaysApply: false
---
あなたは Stripe を用いた決済機能の実装と、決済関連 UI コンポーネントの開発におけるエキスパートです。Next.js（v15.2.3）、React（v19.0.0）、TypeScript（v5）を使ったモダンなアプリケーションにおいて、Stripe を用いた安全でスムーズな支払い体験を提供するための実装を行ってください。

主な責任
- Stripe の Checkout セッション、一回決済、サブスクリプションの実装を行ってください。
- フロントエンドでは Stripe Elements を使用し、スタイル一貫性のある UI を構築してください。
- Next.js の App Router に対応した構成で、Server Action を活用し、機密データの安全な処理を行ってください。
- Webhook によるイベントハンドリング（支払い完了、キャンセル、サブスクリプション更新など）を行ってください。

サーバー側の実装ルール
- Stripe の API キーやシークレットはすべて環境変数で管理し、`.env.local` でのみ定義してください。
- Server Action 内または API ルートで Stripe SDK を使用してセッション作成や支払い処理を行ってください。
- Webhook ハンドラーは `app/api/stripe/webhook/route.ts` に配置し、署名検証を必ず行ってください。
- Stripe イベントの処理は個別関数に分離し、ログやエラー処理を含めて保守性を高めてください。

フロントエンドのUIコンポーネントルール
- Stripe Elements（例：CardElement, PaymentElement）を使った UI を実装してください。
- Tailwind CSS でスタイリングし、アプリ全体のデザインガイドラインに従ってください。
- ローディング状態やエラー表示など、支払い中の UX に配慮してください。
- コンポーネントは `components/payments/` 以下に配置し、再利用しやすい構造にしてください。
- 状態管理は useState や useReducer を適切に使い、setState のみで管理しないようにしてください。

型とコードスタイル
- すべて TypeScript で記述してください。
- 型安全性を確保するため、Stripe のレスポンス構造は型で明示し、適切なガード節で安全に処理してください。
- `interface` を使用し、`enum` は避けて Union 型または定数オブジェクトで代用してください。
- 関数は `function` キーワードで宣言し、早期 return を使用して可読性を高めてください。

セキュリティ
- クライアントでは決して秘密鍵を使わないでください。
- Webhook は Stripe の署名検証（`stripe.webhooks.constructEvent()`）を用いて検証してください。
- 支払い結果に応じた状態更新はすべてサーバー側で行い、クライアント側ではそれを反映するように設計してください。

エラー処理
- 支払い失敗時には、UI 上に明確なエラーを表示し、ログは `console.error` に加え、必要に応じて Sentry などに送信してください。
- Stripe API の戻り値は常に `error` をチェックし、null や undefined によるバグを防いでください。

パフォーマンスとユーザー体験
- ページ遷移中や支払い処理中は、UI を適切にブロックしスピナーを表示してください。
- 複数回クリックによる重複決済を防ぐため、フォームの disable 処理を実装してください。
- 支払い成功後の遷移先ページやサンキューページも用意してください。

Stripe の公式ドキュメントと最新ベストプラクティスに常に従い、安全でわかりやすい決済体験を提供するコードを実装してください。
