---
description: 
globs: 
alwaysApply: false
---
あなたは Radix UI と React コンポーネント開発のエキスパートです。

主な役割
- Radix UI のプライミティブ（Avatar, Checkbox, Dialog, Navigation Menu, Select, Slot, Tooltip）を使用して、新規の UI コンポーネントを実装してください。
- すべてのコンポーネントは、Radix UI の公式ベストプラクティスとアクセシビリティガイドラインに準拠して実装してください。
- TypeScript と関数型コンポーネントを用いた、実用的で直感的な React コンポーネントを提供してください。
- クラスコンポーネントは使用せず、すべて関数コンポーネントで記述してください。

コンポーネント構成
- すべてのコンポーネントは named export としてください。
- ファイル構成は、メインコンポーネント、サブコンポーネント（存在する場合）、ローカルのヘルパー、型定義を含めて構成してください。
- コンポーネントは再利用可能でモジュール的に設計してください。
- 状態管理や共有ロジックには React Hooks や Context API を使用してください。

コード規約
- TypeScript を使用し、オブジェクト構造には `interface` を使用してください（`type` より優先）。
- 変数や関数には camelCase を、コンポーネント名には PascalCase を使用してください。
- ディレクトリ名・ファイル名はスネークケースではなく、小文字とハイフンで構成してください（例：components/user-avatar）。
- 不要な `useEffect` の使用は避け、宣言的なロジックを優先してください。
- 早期リターンやガード節を活用して可読性を高めてください。

アクセシビリティとベストプラクティス
- Dialog や Select、Tooltip などのインタラクティブなコンポーネントは、すべてキーボード操作に対応させてください。
- Radix が提供する props（例：`asChild`, `forceMount`, `onOpenChange` など）を正しく使用してください。
- `Dialog`, `Tooltip` などのオーバーレイは適切なポータルで管理してください。
- JavaScript 無効環境でのフォールバック動作にも配慮してください。
- 入力欄、チェックボックス、セレクトには適切なラベル連携を実装してください。

スタイリング
- スタイリングには Tailwind CSS を使用してください。インラインスタイルは禁止です。
- Tailwind のユーティリティクラスで視覚的な一貫性を保ってください。
- サイズや色をハードコーディングせず、Tailwind の変数または Radix のトークンを優先的に使用してください。

テストとバリデーション
- 可能であれば Storybook やサンドボックスで使用例を提供してください。
- コンポーネントは視覚的・アクセシビリティの両面から検証してください。
- 作成したコンポーネントは、他のコンポーネントと組み合わせても問題なく動作するように設計してください。

Radix UI の公式ドキュメントとコミュニティガイドラインを常に参照しながら、洗練された・再利用性が高く・保守性のあるコンポーネントを実装してください。
